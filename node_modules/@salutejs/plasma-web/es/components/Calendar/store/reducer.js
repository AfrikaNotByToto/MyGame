function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { getDateFromValue, getNextDate, getPrevDate, getStartYear } from '../utils';
import { ActionType } from './types';
export var getInitialState = function getInitialState(value, size, calendarState) {
  var initDate = value || new Date();
  var date = getDateFromValue(initDate);
  return {
    date: _objectSpread(_objectSpread({}, date), {}, {
      day: value !== undefined ? date.day : 0
    }),
    startYear: getStartYear(date.year),
    calendarState: calendarState,
    size: size
  };
};
export var reducer = function reducer(state, action) {
  switch (action.type) {
    case ActionType.PREVIOUS_MONTH:
      {
        var _action$payload = action.payload,
            year = _action$payload.year,
            monthIndex = _action$payload.monthIndex;

        var _getPrevDate = getPrevDate(year, monthIndex),
            _getPrevDate2 = _slicedToArray(_getPrevDate, 2),
            prevYear = _getPrevDate2[0],
            prevMonthIndex = _getPrevDate2[1];

        return _objectSpread(_objectSpread({}, state), {}, {
          date: {
            day: state.date.day,
            monthIndex: prevMonthIndex,
            year: prevYear
          }
        });
      }

    case ActionType.NEXT_MONTH:
      {
        var _action$payload2 = action.payload,
            _monthIndex = _action$payload2.monthIndex,
            _year = _action$payload2.year;

        var _getNextDate = getNextDate(_year, _monthIndex),
            _getNextDate2 = _slicedToArray(_getNextDate, 2),
            nextYear = _getNextDate2[0],
            nextMonthIndex = _getNextDate2[1];

        return _objectSpread(_objectSpread({}, state), {}, {
          date: {
            day: state.date.day,
            monthIndex: nextMonthIndex,
            year: nextYear
          }
        });
      }

    case ActionType.PREVIOUS_YEAR:
      {
        var step = action.payload.step;
        return _objectSpread(_objectSpread({}, state), {}, {
          startYear: state.startYear - step,
          date: {
            day: state.date.day,
            monthIndex: state.date.monthIndex,
            year: state.date.year - step
          }
        });
      }

    case ActionType.NEXT_YEAR:
      {
        var _step = action.payload.step;
        return _objectSpread(_objectSpread({}, state), {}, {
          startYear: state.startYear + _step,
          date: {
            day: state.date.day,
            monthIndex: state.date.monthIndex,
            year: state.date.year + _step
          }
        });
      }

    case ActionType.PREVIOUS_START_YEAR:
      {
        var yearsCount = action.payload.yearsCount;
        return _objectSpread(_objectSpread({}, state), {}, {
          startYear: state.startYear - yearsCount
        });
      }

    case ActionType.NEXT_START_YEAR:
      {
        var _yearsCount = action.payload.yearsCount;
        return _objectSpread(_objectSpread({}, state), {}, {
          startYear: state.startYear + _yearsCount
        });
      }

    case ActionType.UPDATE_DATE:
      {
        var value = action.payload.value;
        var date = getDateFromValue(value);
        var startYear = getStartYear(value.getFullYear());
        return _objectSpread(_objectSpread({}, state), {}, {
          date: date,
          startYear: startYear
        });
      }

    case ActionType.UPDATE_MONTH:
      {
        var _action$payload3 = action.payload,
            calendarState = _action$payload3.calendarState,
            _monthIndex2 = _action$payload3.monthIndex,
            size = _action$payload3.size;
        return _objectSpread(_objectSpread({}, state), {}, {
          size: size,
          calendarState: calendarState,
          date: {
            day: state.date.day,
            monthIndex: _monthIndex2,
            year: state.date.year
          }
        });
      }

    case ActionType.UPDATE_YEAR:
      {
        var _action$payload4 = action.payload,
            _calendarState = _action$payload4.calendarState,
            _year2 = _action$payload4.year;
        return _objectSpread(_objectSpread({}, state), {}, {
          calendarState: _calendarState,
          date: {
            day: state.date.day,
            monthIndex: state.date.monthIndex,
            year: _year2
          }
        });
      }

    case ActionType.UPDATE_CALENDAR_STATE:
      {
        var _action$payload5 = action.payload,
            _calendarState2 = _action$payload5.calendarState,
            _size = _action$payload5.size;
        return _objectSpread(_objectSpread({}, state), {}, {
          calendarState: _calendarState2,
          size: _size || state.size
        });
      }

    default:
      return state;
  }
};