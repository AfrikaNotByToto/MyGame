var _IconDisclosureLeft, _IconDisclosureRight;

import React, { useCallback, useMemo } from 'react';
import styled from 'styled-components';
import { h4Bold } from '@salutejs/plasma-typo';
import { IconDisclosureLeft, IconDisclosureRight } from '@salutejs/plasma-icons';
import { primary } from '@salutejs/plasma-core';
import { CalendarState } from './types';
import { MONTH_NAMES, YEAR_RENDER_COUNT, getCalendarType } from './utils';
import { buttonFocus, flexCenter, flexSpaceBetween } from './mixins';
var StyledCalendarHeader = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-web__sc-jj1w0v-0"
})(["", ";padding:1rem 1.5rem 0;", ";"], h4Bold, flexSpaceBetween);
var StyledHeader = /*#__PURE__*/styled.button.attrs({
  type: 'button'
}).withConfig({
  componentId: "plasma-web__sc-jj1w0v-1"
})(["", ";", ";color:", ";cursor:pointer;padding:0.5rem 0;", ";"], h4Bold, buttonFocus, primary, flexSpaceBetween);
var StyledHeaderDouble = /*#__PURE__*/styled.h4.withConfig({
  componentId: "plasma-web__sc-jj1w0v-2"
})(["", ";margin-top:0;margin-bottom:0;padding:0.5rem 0;flex:1;", ";&:first-of-type{margin-right:3rem;}&:last-of-type{margin-left:3rem;}"], h4Bold, flexCenter);
var StyledArrows = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-web__sc-jj1w0v-3"
})(["padding:0.5rem 0;width:5.5rem;", ";"], flexSpaceBetween);
var StyledArrow = /*#__PURE__*/styled.button.attrs({
  type: 'button'
}).withConfig({
  componentId: "plasma-web__sc-jj1w0v-4"
})(["", ";display:flex;cursor:pointer;"], buttonFocus);
var StyledNavigation = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-web__sc-jj1w0v-5"
})(["width:100%;", ";"], flexCenter);
/**
 * Компонент шапки календаря.
 */

export var CalendarHeader = function CalendarHeader(_ref) {
  var _ref$type = _ref.type,
      type = _ref$type === void 0 ? 'Days' : _ref$type,
      _ref$startYear = _ref.startYear,
      startYear = _ref$startYear === void 0 ? 0 : _ref$startYear,
      firstDate = _ref.firstDate,
      secondDate = _ref.secondDate,
      isDouble = _ref.isDouble,
      onPrev = _ref.onPrev,
      onNext = _ref.onNext,
      onUpdateCalendarState = _ref.onUpdateCalendarState;
  var handleCalendarState = useCallback(function () {
    if (type === CalendarState.Days) {
      onUpdateCalendarState === null || onUpdateCalendarState === void 0 ? void 0 : onUpdateCalendarState(CalendarState.Months, [3, 2]);
    }

    if (type === CalendarState.Months) {
      onUpdateCalendarState === null || onUpdateCalendarState === void 0 ? void 0 : onUpdateCalendarState(CalendarState.Years, [3, 2]);
    }
  }, [type, onUpdateCalendarState]);
  var getHeaderContent = useCallback(function (date) {
    if (!date) {
      return '';
    }

    if (type === CalendarState.Days) {
      return "".concat(MONTH_NAMES[date.monthIndex], " ").concat(date.year);
    }

    if (type === CalendarState.Months) {
      return "".concat(date.year);
    }

    if (type === CalendarState.Years) {
      return "".concat(startYear, "\u2014").concat(startYear + YEAR_RENDER_COUNT - 1);
    }

    return '';
  }, [type, startYear]);
  var currentCalendarType = getCalendarType(isDouble ? CalendarState.Days : type);
  var PreviousButton = useMemo(function () {
    return /*#__PURE__*/React.createElement(StyledArrow, {
      "aria-label": "\u041F\u0440\u0435\u0434\u044B\u0434\u0443\u0449\u0438\u0439 ".concat(currentCalendarType),
      tabIndex: 0,
      onClick: function onClick() {
        return onPrev();
      }
    }, _IconDisclosureLeft || (_IconDisclosureLeft = /*#__PURE__*/React.createElement(IconDisclosureLeft, null)));
  }, [currentCalendarType, onPrev]);
  var NextButton = useMemo(function () {
    return /*#__PURE__*/React.createElement(StyledArrow, {
      "aria-label": "\u0421\u043B\u0435\u0434\u0443\u044E\u0449\u0438\u0439 ".concat(currentCalendarType),
      tabIndex: 0,
      onClick: function onClick() {
        return onNext();
      }
    }, _IconDisclosureRight || (_IconDisclosureRight = /*#__PURE__*/React.createElement(IconDisclosureRight, null)));
  }, [currentCalendarType, onNext]);
  return /*#__PURE__*/React.createElement(StyledCalendarHeader, null, isDouble ? /*#__PURE__*/React.createElement(StyledNavigation, null, PreviousButton, /*#__PURE__*/React.createElement(StyledHeaderDouble, {
    "aria-live": "polite"
  }, getHeaderContent(firstDate)), /*#__PURE__*/React.createElement(StyledHeaderDouble, {
    "aria-live": "polite"
  }, getHeaderContent(secondDate)), NextButton) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StyledHeader, {
    "aria-live": "polite",
    id: "id-grid-label",
    onClick: handleCalendarState,
    tabIndex: 0
  }, getHeaderContent(firstDate)), /*#__PURE__*/React.createElement(StyledArrows, null, PreviousButton, NextButton)));
};