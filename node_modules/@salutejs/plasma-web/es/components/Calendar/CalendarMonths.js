function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React, { useCallback, useEffect, useRef } from 'react';
import styled from 'styled-components';
import { bodyS } from '@salutejs/plasma-typo';
import { useMonths } from './hooks';
import { flexCenter, selected as selectedMixin } from './mixins';
var StyledCalendarMonths = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-web__sc-p75yqi-0"
})(["padding:0.5rem 1.5rem 1.5rem;box-sizing:border-box;"]);
var StyledFlex = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-web__sc-p75yqi-1"
})(["", ";"], flexCenter);
var StyledMonth = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-web__sc-p75yqi-2"
})(["border-radius:0.438rem;", ";"], flexCenter);
var StyledMonthRoot = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-web__sc-p75yqi-3"
})(["", ";position:relative;box-sizing:border-box;min-height:3.5rem;border-radius:0.5rem;flex:1;", ";", ";"], bodyS, flexCenter, function (_ref) {
  var isSelected = _ref.isSelected,
      isCurrent = _ref.isCurrent;
  return selectedMixin({
    StyledItem: StyledMonth,
    minWidth: 5.25,
    minHeight: 3.25,
    isSelected: isSelected,
    isCurrent: isCurrent
  });
});
/**
 * Компонент месяцев в календаре.
 */

export var CalendarMonths = function CalendarMonths(_ref2) {
  var currentDate = _ref2.date,
      selectIndexes = _ref2.selectIndexes,
      outerRefs = _ref2.outerRefs,
      onChangeMonth = _ref2.onChangeMonth,
      onSetSelected = _ref2.onSetSelected,
      onKeyDown = _ref2.onKeyDown;

  var _useMonths = useMonths(currentDate),
      _useMonths2 = _slicedToArray(_useMonths, 2),
      months = _useMonths2[0],
      selected = _useMonths2[1];

  var selectedRef = useRef(selected);
  var onSetSelectedRef = useRef(onSetSelected);
  var handleOnChangeMonth = useCallback(function (event) {
    /**
     * нужно вызвать stopImmediatePropagation для случаев, когда
     * обработчик события onClick навешивается снаружи.
     * Как, например, в компоненте Popup
     */
    event.nativeEvent.stopImmediatePropagation();
    var monthIndex = event.currentTarget.dataset.monthIndex;
    onChangeMonth(Number(monthIndex));
  }, [onChangeMonth]);
  var getRefs = useCallback(function (element, i, j) {
    outerRefs.current[i][j] = element;
  }, [outerRefs]);
  useEffect(function () {
    if (selectedRef.current) {
      var _onSetSelectedRef$cur;

      (_onSetSelectedRef$cur = onSetSelectedRef.current) === null || _onSetSelectedRef$cur === void 0 ? void 0 : _onSetSelectedRef$cur.call(onSetSelectedRef, selectedRef.current);
    }
  }, []);
  return /*#__PURE__*/React.createElement(StyledCalendarMonths, {
    role: "grid",
    "aria-labelledby": "id-grid-label",
    onKeyDown: onKeyDown
  }, months.map(function (month, i) {
    return /*#__PURE__*/React.createElement(StyledFlex, {
      role: "row",
      key: i
    }, month.map(function (_ref3, j) {
      var monthName = _ref3.monthName,
          monthIndex = _ref3.monthIndex,
          isSelected = _ref3.isSelected,
          isCurrent = _ref3.isCurrent,
          monthFullName = _ref3.monthFullName;
      return /*#__PURE__*/React.createElement(StyledMonthRoot, {
        id: "month-test-".concat(i, "-").concat(j),
        ref: function ref(element) {
          return getRefs(element, i, j);
        },
        tabIndex: i === (selectIndexes === null || selectIndexes === void 0 ? void 0 : selectIndexes[0]) && j === (selectIndexes === null || selectIndexes === void 0 ? void 0 : selectIndexes[1]) ? 0 : -1,
        isCurrent: isCurrent,
        isSelected: isSelected,
        onClick: handleOnChangeMonth,
        "data-month-index": monthIndex,
        "aria-selected": isSelected,
        role: "gridcell",
        key: "StyledMonth-".concat(i, "-").concat(j),
        "aria-label": monthFullName
      }, /*#__PURE__*/React.createElement(StyledMonth, null, monthName));
    }));
  }));
};