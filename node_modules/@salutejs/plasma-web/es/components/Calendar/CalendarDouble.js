var _StyledSeparator;

var _excluded = ["value", "min", "max", "eventList", "disabledList", "onChangeValue"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useState, useCallback, useMemo } from 'react';
import styled from 'styled-components';
import { surfaceLiquid02 } from '@salutejs/plasma-core';
import { getDateFromValue, getNextDate, getPrevDate, isValueUpdate } from './utils';
import { CalendarDays } from './CalendarDays';
import { CalendarHeader } from './CalendarHeader';
import { useKeyNavigation } from './hooks';
var StyledCalendar = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-web__sc-ma8u5g-0"
})(["position:relative;user-select:none;z-index:1;display:flex;flex-direction:column;width:39rem;height:19.5rem;"]);
var StyledSeparator = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-web__sc-ma8u5g-1"
})(["background-color:", ";min-width:0.063rem;margin:0.5rem 0 1.5rem;"], surfaceLiquid02);
var StyledWrapper = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-web__sc-ma8u5g-2"
})(["display:flex;"]);
/**
 * Компонент двойного календаря.
 */

export var CalendarDouble = function CalendarDouble(_ref) {
  var externalValue = _ref.value,
      min = _ref.min,
      max = _ref.max,
      eventList = _ref.eventList,
      disabledList = _ref.disabledList,
      onChangeValue = _ref.onChangeValue,
      rest = _objectWithoutProperties(_ref, _excluded);

  var _useMemo = useMemo(function () {
    return Array.isArray(externalValue) ? externalValue : [externalValue];
  }, [externalValue]),
      _useMemo2 = _slicedToArray(_useMemo, 2),
      firstValue = _useMemo2[0],
      secondValue = _useMemo2[1];

  var value = secondValue || firstValue;

  var _useState = useState(),
      _useState2 = _slicedToArray(_useState, 2),
      hoveredDay = _useState2[0],
      setHoveredDay = _useState2[1];

  var _useState3 = useState(getDateFromValue(value)),
      _useState4 = _slicedToArray(_useState3, 2),
      date = _useState4[0],
      setDate = _useState4[1];

  var _useState5 = useState(value),
      _useState6 = _slicedToArray(_useState5, 2),
      prevValue = _useState6[0],
      setPrevValue = _useState6[1];

  var _useState7 = useState(function () {
    var nextDate = getDateFromValue(firstValue);

    var _getNextDate = getNextDate(nextDate.year, nextDate.monthIndex),
        _getNextDate2 = _slicedToArray(_getNextDate, 2),
        initialYear = _getNextDate2[0],
        initialMonth = _getNextDate2[1];

    return {
      monthIndex: [nextDate.monthIndex, initialMonth],
      year: [nextDate.year, initialYear]
    };
  }),
      _useState8 = _slicedToArray(_useState7, 2),
      doubleDate = _useState8[0],
      setMonths = _useState8[1];

  var handleMonth = useCallback(function (getDate) {
    var _getDate = getDate(doubleDate.year[0], doubleDate.monthIndex[0]),
        _getDate2 = _slicedToArray(_getDate, 2),
        newCurrentYear = _getDate2[0],
        newCurrentMonth = _getDate2[1];

    var _getDate3 = getDate(doubleDate.year[1], doubleDate.monthIndex[1]),
        _getDate4 = _slicedToArray(_getDate3, 2),
        newNextYear = _getDate4[0],
        newNextMonth = _getDate4[1];

    setMonths({
      monthIndex: [newCurrentMonth, newNextMonth],
      year: [newCurrentYear, newNextYear]
    });
  }, [doubleDate]);
  var handlePrev = useCallback(function () {
    handleMonth(getPrevDate);
  }, [handleMonth]);
  var handleNext = useCallback(function () {
    handleMonth(getNextDate);
  }, [handleMonth]);

  var _useKeyNavigation = useKeyNavigation({
    isDouble: true,
    size: [11, 6],
    onNext: handleNext,
    onPrev: handlePrev
  }),
      _useKeyNavigation2 = _slicedToArray(_useKeyNavigation, 4),
      selectIndexes = _useKeyNavigation2[0],
      onKeyDown = _useKeyNavigation2[1],
      onSelectIndexes = _useKeyNavigation2[2],
      outerRefs = _useKeyNavigation2[3];

  var handleOnChangeDay = useCallback(function (newDate, coord) {
    var newDay = new Date(newDate.year, newDate.monthIndex, newDate.day);
    onChangeValue(newDay);
    onSelectIndexes(coord);
  }, [onChangeValue, onSelectIndexes]);
  var firstDate = useMemo(function () {
    return {
      day: date.day,
      year: doubleDate.year[0],
      monthIndex: doubleDate.monthIndex[0]
    };
  }, [date, doubleDate]);
  var secondDate = useMemo(function () {
    return {
      day: date.day,
      year: doubleDate.year[1],
      monthIndex: doubleDate.monthIndex[1]
    };
  }, [date, doubleDate]);

  if (value && prevValue && isValueUpdate(value, prevValue)) {
    var newDate = getDateFromValue(value);
    var year = newDate.year,
        monthIndex = newDate.monthIndex;

    var _doubleDate$monthInde = _slicedToArray(doubleDate.monthIndex, 2),
        prevMonthIndex = _doubleDate$monthInde[1],
        _doubleDate$year = _slicedToArray(doubleDate.year, 2),
        prevYear = _doubleDate$year[1];

    if (prevMonthIndex !== monthIndex || prevYear !== year) {
      var _getNextDate3 = getNextDate(year, monthIndex),
          _getNextDate4 = _slicedToArray(_getNextDate3, 2),
          nextYear = _getNextDate4[0],
          nextMonthIndex = _getNextDate4[1];

      setDate(newDate);
      setMonths({
        monthIndex: [monthIndex, nextMonthIndex],
        year: [year, nextYear]
      });
    }

    setPrevValue(value);
  }

  return /*#__PURE__*/React.createElement(StyledCalendar, _extends({
    "aria-label": "\u0412\u044B\u0431\u043E\u0440 \u0434\u0430\u0442\u044B"
  }, rest), /*#__PURE__*/React.createElement(CalendarHeader, {
    isDouble: true,
    firstDate: firstDate,
    secondDate: secondDate,
    onPrev: handlePrev,
    onNext: handleNext
  }), /*#__PURE__*/React.createElement(StyledWrapper, null, /*#__PURE__*/React.createElement(CalendarDays, {
    isDouble: true,
    eventList: eventList,
    disabledList: disabledList,
    min: min,
    max: max,
    value: externalValue,
    date: firstDate,
    hoveredDay: hoveredDay,
    selectIndexes: selectIndexes,
    onChangeDay: handleOnChangeDay,
    onHoverDay: setHoveredDay,
    onSetSelected: onSelectIndexes,
    onKeyDown: onKeyDown,
    outerRefs: outerRefs
  }), _StyledSeparator || (_StyledSeparator = /*#__PURE__*/React.createElement(StyledSeparator, null)), /*#__PURE__*/React.createElement(CalendarDays, {
    isDouble: true,
    isSecond: true,
    eventList: eventList,
    disabledList: disabledList,
    min: min,
    max: max,
    value: externalValue,
    date: secondDate,
    hoveredDay: hoveredDay,
    selectIndexes: selectIndexes,
    onChangeDay: handleOnChangeDay,
    onHoverDay: setHoveredDay,
    onSetSelected: onSelectIndexes,
    onKeyDown: onKeyDown,
    outerRefs: outerRefs
  })));
};