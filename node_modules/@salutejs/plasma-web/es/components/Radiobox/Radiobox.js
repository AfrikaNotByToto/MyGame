var _excluded = ["size", "id", "label", "description", "disabled", "style", "className", "aria-label"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef, useMemo } from 'react';
import styled, { css } from 'styled-components';
import { BaseboxContentWrapper, useUniqId, white } from '@salutejs/plasma-core';
import { extractTextFrom } from '../../utils';
import { StyledRoot as CheckboxRoot, StyledInput as CheckboxInput, StyledTrigger as CheckboxTrigger, StyledContent, StyledLabel as CheckboxLabel, StyledDescription as CheckboxDescription } from '../Checkbox/Checkbox';
import { sizes } from './Radiobox.props';
var StyledTrigger = /*#__PURE__*/styled(CheckboxTrigger).withConfig({
  componentId: "plasma-web__sc-1m0sn17-0"
})(["", " flex-shrink:0;"], function (_ref) {
  var size = _ref.size;
  return css(["width:", ";height:", ";border-radius:", ";"], sizes[size].width, sizes[size].height, sizes[size].outLineRadius);
});
var StyledEllipse = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-web__sc-1m0sn17-1"
})(["", " position:absolute;top:0;left:0;right:0;bottom:0;margin:auto;background-color:", ";transition:transform 0.3s ease-in-out;transform:scale(0);input:checked + label ", " &{transform:scale(1);}"], function (_ref2) {
  var size = _ref2.size;
  return css(["width:", ";height:", ";border-radius:", ";"], sizes[size].ellipseSize, sizes[size].ellipseSize, sizes[size].ellipseSize);
}, white, StyledTrigger);
var CheckboxContent = /*#__PURE__*/styled(StyledContent).withConfig({
  componentId: "plasma-web__sc-1m0sn17-2"
})(["", ""], function (_ref3) {
  var size = _ref3.size;
  return css(["margin-top:", ";margin-left:", ";"], sizes[size].contentTopOffset, sizes[size].contentLeftOffset);
});
/**
 * Переключатель, или *радиокнопка*.
 */
// eslint-disable-next-line prefer-arrow-callback

export var Radiobox = /*#__PURE__*/forwardRef(function Radiobox(_ref4, ref) {
  var _ref4$size = _ref4.size,
      size = _ref4$size === void 0 ? 'm' : _ref4$size,
      id = _ref4.id,
      label = _ref4.label,
      description = _ref4.description,
      disabled = _ref4.disabled,
      style = _ref4.style,
      className = _ref4.className,
      ariaLabelExternal = _ref4['aria-label'],
      rest = _objectWithoutProperties(_ref4, _excluded);

  var uniqId = useUniqId();
  var uniqLabelId = useUniqId();
  var uniqDescriptionId = useUniqId();
  var radioboxId = id || uniqId;
  var ariaLabel = useMemo(function () {
    return ariaLabelExternal || extractTextFrom(label);
  }, [ariaLabelExternal, label]);
  return /*#__PURE__*/React.createElement(CheckboxRoot, {
    $disabled: disabled,
    style: style,
    className: className,
    tabIndex: -1
  }, /*#__PURE__*/React.createElement(CheckboxInput, _extends({}, rest, {
    id: radioboxId,
    ref: ref,
    type: "radio",
    disabled: disabled,
    "aria-label": ariaLabel,
    "aria-describedby": uniqDescriptionId
  })), /*#__PURE__*/React.createElement(BaseboxContentWrapper, {
    htmlFor: radioboxId
  }, /*#__PURE__*/React.createElement(StyledTrigger, {
    size: size,
    outlineRadius: sizes[size].outLineRadius
  }, /*#__PURE__*/React.createElement(StyledEllipse, {
    size: size
  })), /*#__PURE__*/React.createElement(CheckboxContent, {
    size: size
  }, label && /*#__PURE__*/React.createElement(CheckboxLabel, {
    as: "span",
    size: size,
    id: uniqLabelId,
    "aria-hidden": typeof label === 'string'
  }, label), description && /*#__PURE__*/React.createElement(CheckboxDescription, {
    size: size,
    mt: 4,
    id: uniqDescriptionId
  }, description))));
});