var _excluded = ["size", "offset"];

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import styled, { css } from 'styled-components';
import { gridColumns, gridSizes, mediaQuery } from '../../utils';
import { sizes, offsets } from './types';
var deviceScale = 1;

/**
 * Блок для размещения контента или строк (``Row``) внутри себя.
 */
export var Col = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-web__sc-1bmygvc-0"
})(["box-sizing:border-box;padding-left:var(--plasma-grid-gutter);padding-right:var(--plasma-grid-gutter);", ""], function (_ref) {
  var size = _ref.size,
      offset = _ref.offset,
      props = _objectWithoutProperties(_ref, _excluded);

  return gridSizes.map(function (breakpoint) {
    var bpSize = sizes[breakpoint];
    var bpOffset = offsets[breakpoint];
    var colSize = props[bpSize] || size;
    var colOffset = props[bpOffset] || offset;
    return mediaQuery(breakpoint, deviceScale)(css(["", " ", ""], colSize && "width: ".concat(100 / gridColumns[breakpoint] * colSize, "%;"), colOffset && "margin-left: ".concat(100 / gridColumns[breakpoint] * colOffset, "%;")));
  });
});