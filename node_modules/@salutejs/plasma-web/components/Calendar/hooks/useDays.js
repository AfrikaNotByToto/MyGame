"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useDays = void 0;

var _react = /*#__PURE__*/require("react");

var _utils = /*#__PURE__*/require("../utils");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/**
 * Метод возвращающий массив дней в предыдущем месяце.
 */
var getDaysInPrevMonth = function getDaysInPrevMonth(date, offsetDayInWeek, value) {
  var _getPrevDate = (0, _utils.getPrevDate)(date.year, date.monthIndex),
      _getPrevDate2 = _slicedToArray(_getPrevDate, 2),
      prevYear = _getPrevDate2[0],
      prevMonth = _getPrevDate2[1];

  var daysInPrevMonth = (0, _utils.getDaysInMonth)(prevMonth, prevYear);
  return Array.from(Array(offsetDayInWeek), function (_, i) {
    return {
      isCurrent: false,
      isSelected: false,
      isDayInCurrentMonth: false,
      inRange: Array.isArray(value) ? (0, _utils.isDayInRage)(prevYear, prevMonth, daysInPrevMonth - (offsetDayInWeek - i) + 1, value) : false,
      date: {
        day: daysInPrevMonth - (offsetDayInWeek - i) + 1,
        monthIndex: prevMonth,
        year: prevYear
      }
    };
  });
};
/**
 * Метод возвращающий массив дней в текущем месяце.
 */


var getDaysInCurrentMonth = function getDaysInCurrentMonth(date, daysInMonth, value) {
  return Array.from(Array(daysInMonth), function (_, i) {
    return {
      isCurrent: (0, _utils.IsCurrentDay)(date, i + 1),
      isSelected: Array.isArray(value) ? Boolean(value.find(function (v) {
        return (0, _utils.isSelectedDay)(date, i + 1, v);
      })) : (0, _utils.isSelectedDay)(date, i + 1, value),
      isDayInCurrentMonth: true,
      inRange: Array.isArray(value) ? (0, _utils.isDayInRage)(date.year, date.monthIndex, i + 1, value) : false,
      date: {
        day: i + 1,
        monthIndex: date.monthIndex,
        year: date.year
      }
    };
  });
};
/**
 * Метод возвращающий массив дней в следующем месяце.
 */


var getDaysInNextMonth = function getDaysInNextMonth(date, daysInMonth, offsetDayInWeek, value) {
  var _getNextDate = (0, _utils.getNextDate)(date.year, date.monthIndex),
      _getNextDate2 = _slicedToArray(_getNextDate, 2),
      nextYear = _getNextDate2[0],
      nextMonthIndex = _getNextDate2[1];

  var visibleDayCount = 42;
  var restDaysInCalendar = visibleDayCount - (daysInMonth + offsetDayInWeek);
  return Array.from(Array(restDaysInCalendar), function (_, i) {
    return {
      isCurrent: false,
      isSelected: false,
      isDayInCurrentMonth: false,
      inRange: Array.isArray(value) ? (0, _utils.isDayInRage)(nextYear, nextMonthIndex, i + 1, value) : false,
      date: {
        day: i + 1,
        monthIndex: nextMonthIndex,
        year: nextYear
      }
    };
  });
};

var isDisabledArrowLeft = function isDisabledArrowLeft(date, min) {
  var currentDate = new Date(date);
  currentDate.setDate(currentDate.getDate() - 1);
  return min && min >= currentDate || min && min >= date;
};

var isDisabledArrowRight = function isDisabledArrowRight(date, max) {
  var currentDate = new Date(date);
  currentDate.setDate(currentDate.getDate() + 1);
  return max && max <= currentDate || max && max <= date;
};

var isDisabledArrowUp = function isDisabledArrowUp(date, min) {
  var currentDate = new Date(date);
  currentDate.setDate(date.getDate() - 7);
  return min && min >= currentDate;
};

var isDisabledArrowDown = function isDisabledArrowDown(date, max) {
  var currentDate = new Date(date);
  currentDate.setDate(date.getDate() + 7);
  return max && max <= currentDate;
};

var isDisabledNextMonth = function isDisabledNextMonth(_ref, max) {
  var year = _ref.year,
      monthIndex = _ref.monthIndex,
      day = _ref.day;

  if (!max) {
    return false;
  }

  var currentDate = new Date(year, monthIndex, day);
  currentDate.setDate(currentDate.getDate() + 1);
  var isOut = true;

  while (isOut && currentDate <= max) {
    isOut = max <= currentDate;
    currentDate.setDate(currentDate.getDate() + 1);
  }

  return isOut;
};

var isDisabledPreviousMonth = function isDisabledPreviousMonth(_ref2, min) {
  var year = _ref2.year,
      monthIndex = _ref2.monthIndex,
      day = _ref2.day;

  if (!min) {
    return false;
  }

  var currentDate = new Date(year, monthIndex, day);
  currentDate.setDate(currentDate.getDate() - 1);
  var isOut = true;

  while (isOut && currentDate >= min) {
    isOut = min >= currentDate;
    currentDate.setDate(currentDate.getDate() - 1);
  }

  return isOut;
};

var getDisabledArrowKey = function getDisabledArrowKey(currentDate, min, max) {
  var disabledArrowKey = [];

  if (isDisabledArrowLeft(currentDate, min)) {
    disabledArrowKey.push('left');
  }

  if (isDisabledArrowRight(currentDate, max)) {
    disabledArrowKey.push('right');
  }

  if (isDisabledArrowDown(currentDate, max)) {
    disabledArrowKey.push('down');
  }

  if (isDisabledArrowUp(currentDate, min)) {
    disabledArrowKey.push('up');
  }

  return disabledArrowKey.join(',');
};

var getDisabledMonths = function getDisabledMonths(list, min, max) {
  var disabledMonth = [];

  if (isDisabledPreviousMonth(list[0], min)) {
    disabledMonth.push('previous');
  }

  if (isDisabledNextMonth(list[list.length - 1], max)) {
    disabledMonth.push('next');
  }

  return disabledMonth.join(',');
};
/**
 * Метод для получения набора неповторяющихся дат.
 */


var getPropsMap = function getPropsMap(props) {
  return props.reduce(function (acc, prop) {
    var _getDateFromValue = (0, _utils.getDateFromValue)(prop.date),
        year = _getDateFromValue.year,
        monthIndex = _getDateFromValue.monthIndex,
        day = _getDateFromValue.day;

    var key = "".concat(year, "-").concat(monthIndex, "-").concat(day);
    var propList = acc.get(key) || [];
    propList.push(prop);
    return acc.set(key, propList);
  }, new Map());
};
/**
 * Метод модифицирующий дни (добавляющий свойства events и disabled).
 */


var getDaysWithModifications = function getDaysWithModifications(days) {
  var eventList = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var disabledList = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var min = arguments.length > 3 ? arguments[3] : undefined;
  var max = arguments.length > 4 ? arguments[4] : undefined;
  var eventsMap = getPropsMap(eventList);
  var disabledDaysMap = getPropsMap(disabledList);
  var daysList = days.filter(function (_ref3) {
    var isDayInCurrentMonth = _ref3.isDayInCurrentMonth;
    return isDayInCurrentMonth;
  }).map(function (_ref4) {
    var date = _ref4.date;
    return date;
  });
  var disabledMonths = getDisabledMonths(daysList, min, max);
  return days.map(function (dayItem) {
    var date = dayItem.date;
    var year = date.year,
        monthIndex = date.monthIndex,
        day = date.day;
    var keyDay = "".concat(year, "-").concat(monthIndex, "-").concat(day);
    var currentDate = new Date(year, monthIndex, day);
    var isOutOfMinMaxRange = min && min >= currentDate || max && max <= currentDate;
    dayItem.events = eventsMap.get(keyDay);
    dayItem.disabled = disabledDaysMap.has(keyDay) || isOutOfMinMaxRange;
    dayItem.isOutOfMinMaxRange = isOutOfMinMaxRange;
    dayItem.disabledArrowKey = getDisabledArrowKey(currentDate, min, max);
    dayItem.disabledMonths = disabledMonths;
    return dayItem;
  });
};
/**
 * Хук для получения списка дней.
 */


var useDays = function useDays(date, value, eventList, disabledList, min, max) {
  return (0, _react.useMemo)(function () {
    var monthIndex = date.monthIndex,
        year = date.year;
    var daysInMonth = (0, _utils.getDaysInMonth)(monthIndex, year);
    var offsetDayInWeek = (0, _utils.getOffsetDayInWeek)(monthIndex, year);
    var days = [].concat(_toConsumableArray(getDaysInPrevMonth(date, offsetDayInWeek, value)), _toConsumableArray(getDaysInCurrentMonth(date, daysInMonth, value)), _toConsumableArray(getDaysInNextMonth(date, daysInMonth, offsetDayInWeek, value)));

    if (eventList !== null && eventList !== void 0 && eventList.length || disabledList !== null && disabledList !== void 0 && disabledList.length || max || min) {
      var modifiedDays = getDaysWithModifications(days, eventList, disabledList, min, max);
      return (0, _utils.getMatrix)(modifiedDays);
    }

    return (0, _utils.getMatrix)(days);
  }, [date, value, eventList, disabledList, max, min]);
};

exports.useDays = useDays;