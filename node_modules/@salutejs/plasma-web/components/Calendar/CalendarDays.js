"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CalendarDays = void 0;

var _react = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("react"));

var _styledComponents = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("styled-components"));

var _utils = /*#__PURE__*/require("./utils");

var _hooks = /*#__PURE__*/require("./hooks");

var _mixins = /*#__PURE__*/require("./mixins");

var _CalendarDayItem = /*#__PURE__*/require("./CalendarDayItem");

var _StyledCalendarDaysHi;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var StyledFlex = /*#__PURE__*/_styledComponents["default"].div.withConfig({
  componentId: "plasma-web__sc-ishbi1-0"
})(["", ";"], _mixins.flexCenter);

var StyledCalendarDays = /*#__PURE__*/_styledComponents["default"].div.withConfig({
  componentId: "plasma-web__sc-ishbi1-1"
})(["outline:none;padding:0.5rem 1rem 1.5rem;box-sizing:border-box;"]);

var StyledCalendarDaysHint = /*#__PURE__*/_styledComponents["default"].span.withConfig({
  componentId: "plasma-web__sc-ishbi1-2"
})(["display:none;"]);
/**
 * Компонент дней в календаре.
 */


var CalendarDays = function CalendarDays(_ref) {
  var currentDate = _ref.date,
      value = _ref.value,
      eventList = _ref.eventList,
      disabledList = _ref.disabledList,
      min = _ref.min,
      max = _ref.max,
      hoveredDay = _ref.hoveredDay,
      selectIndexes = _ref.selectIndexes,
      isDouble = _ref.isDouble,
      isSecond = _ref.isSecond,
      outerRefs = _ref.outerRefs,
      onChangeDay = _ref.onChangeDay,
      onHoverDay = _ref.onHoverDay,
      onSetSelected = _ref.onSetSelected,
      onKeyDown = _ref.onKeyDown;

  var _useDays = (0, _hooks.useDays)(currentDate, value, eventList, disabledList, min, max),
      _useDays2 = _slicedToArray(_useDays, 2),
      days = _useDays2[0],
      selected = _useDays2[1];

  var selectedRef = (0, _react.useRef)(selected);
  var onSetSelectedRef = (0, _react.useRef)(onSetSelected);
  var offset = isSecond ? _utils.ROW_STEP : 0;
  var getSelectedDate = (0, _react.useCallback)(function (event) {
    var _event$currentTarget$ = event.currentTarget.dataset,
        day = _event$currentTarget$.day,
        monthIndex = _event$currentTarget$.monthIndex,
        year = _event$currentTarget$.year;
    var selectedDate = {
      day: Number(day),
      monthIndex: Number(monthIndex),
      year: Number(year)
    };

    if (!(0, _utils.canSelectDate)(selectedDate, value, disabledList)) {
      return;
    }

    return selectedDate;
  }, [disabledList, value]);
  var handleOnChangeDay = (0, _react.useCallback)(function (i, j) {
    return function (event) {
      var selectedDate = getSelectedDate(event);

      if (!selectedDate) {
        return;
      }

      onChangeDay(selectedDate, [i + offset, j]);

      if ((0, _utils.isSelectProcess)(value)) {
        onHoverDay === null || onHoverDay === void 0 ? void 0 : onHoverDay(undefined);
      }
    };
  }, [getSelectedDate, onChangeDay, offset, value, onHoverDay]);
  var handleOnHoverDay = (0, _react.useCallback)(function (event) {
    var selectedDate = getSelectedDate(event);
    var isSelectedDone = Array.isArray(value) && value[0] && value[1];

    if (!selectedDate || !Array.isArray(value) || isSelectedDone) {
      return;
    }

    onHoverDay === null || onHoverDay === void 0 ? void 0 : onHoverDay(selectedDate);
  }, [getSelectedDate, onHoverDay, value]);
  var handleOnFocusDay = (0, _react.useCallback)(function () {// заглушка будет убрана при реализации доступности
  }, []);
  var getRefs = (0, _react.useCallback)(function (element, isDayInCurrentMonth, i, j) {
    if (isDayInCurrentMonth) {
      outerRefs.current[i + offset][j] = element;
    }
  }, [offset, outerRefs]);
  (0, _react.useEffect)(function () {
    if (selectedRef.current) {
      var _onSetSelectedRef$cur;

      (_onSetSelectedRef$cur = onSetSelectedRef.current) === null || _onSetSelectedRef$cur === void 0 ? void 0 : _onSetSelectedRef$cur.call(onSetSelectedRef, selectedRef.current);
    }
  }, []);
  return /*#__PURE__*/_react["default"].createElement(StyledCalendarDays, {
    role: "grid",
    "aria-labelledby": "id-grid-label",
    onKeyDown: onKeyDown
  }, _StyledCalendarDaysHi || (_StyledCalendarDaysHi = /*#__PURE__*/_react["default"].createElement(StyledCalendarDaysHint, {
    id: "withShift"
  }, "\u0414\u043B\u044F \u043D\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u0438 \u0442\u043E\u043B\u044C\u043A\u043E \u043F\u043E \u0434\u043E\u0441\u0442\u0443\u043F\u043D\u044B\u043C \u0434\u0430\u0442\u0430\u043C \u0443\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0439\u0442\u0435 \u043A\u043B\u0430\u0432\u0438\u0448\u0443 Shift.")), /*#__PURE__*/_react["default"].createElement(StyledFlex, {
    role: "row"
  }, _utils.SHORT_DAY_NAMES.map(function (name) {
    return /*#__PURE__*/_react["default"].createElement(_CalendarDayItem.CalendarDayItem, {
      role: "columnheader",
      "aria-label": _utils.FULL_DAY_NAMES[name],
      key: name,
      dayOfWeek: true,
      day: name
    });
  })), days.map(function (day, i) {
    return /*#__PURE__*/_react["default"].createElement(StyledFlex, {
      role: "row",
      key: i
    }, day.map(function (_ref2, j) {
      var date = _ref2.date,
          events = _ref2.events,
          disabled = _ref2.disabled,
          isSelected = _ref2.isSelected,
          isCurrent = _ref2.isCurrent,
          isDayInCurrentMonth = _ref2.isDayInCurrentMonth,
          inRange = _ref2.inRange,
          _ref2$isOutOfMinMaxRa = _ref2.isOutOfMinMaxRange,
          isOutOfMinMaxRange = _ref2$isOutOfMinMaxRa === void 0 ? false : _ref2$isOutOfMinMaxRa,
          disabledArrowKey = _ref2.disabledArrowKey,
          disabledMonths = _ref2.disabledMonths;
      return /*#__PURE__*/_react["default"].createElement(_CalendarDayItem.CalendarDayItem, {
        ref: function ref(element) {
          return getRefs(element, isDayInCurrentMonth, i, j);
        },
        eventList: events,
        disabled: disabled,
        day: date.day,
        year: date.year,
        monthIndex: date.monthIndex,
        isFocused: i + offset === (selectIndexes === null || selectIndexes === void 0 ? void 0 : selectIndexes[0]) && j === (selectIndexes === null || selectIndexes === void 0 ? void 0 : selectIndexes[1]) && !isOutOfMinMaxRange,
        isSelected: isSelected,
        isCurrent: isCurrent,
        isDayInCurrentMonth: isDayInCurrentMonth,
        isDouble: isDouble,
        isHovered: (0, _utils.isSameDay)(date, hoveredDay),
        inRange: (0, _utils.getInRange)(value, date, hoveredDay, inRange),
        sideInRange: (0, _utils.getSideInRange)(value, date, hoveredDay, isSelected),
        onClick: disabled ? undefined : handleOnChangeDay(i, j),
        onMouseOver: disabled ? undefined : handleOnHoverDay,
        onFocus: handleOnFocusDay,
        key: "StyledDay-".concat(j),
        role: "gridcell",
        disabledArrowKey: disabledArrowKey,
        disabledMonths: disabledMonths
      });
    }));
  }));
};

exports.CalendarDays = CalendarDays;