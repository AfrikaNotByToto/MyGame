"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CalendarDayItem = void 0;

var _react = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("react"));

var _styledComponents = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("styled-components"));

var _plasmaCore = /*#__PURE__*/require("@salutejs/plasma-core");

var _plasmaTypo = /*#__PURE__*/require("@salutejs/plasma-typo");

var _mixins = /*#__PURE__*/require("./mixins");

var _excluded = ["isFocused", "dayOfWeek", "disabled", "isCurrent", "isSelected", "isDayInCurrentMonth", "isDouble", "inRange", "isHovered", "sideInRange", "eventList", "day", "monthIndex", "year", "onClick", "onMouseOver", "onFocus", "disabledArrowKey", "disabledMonths"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var StyledDay = /*#__PURE__*/_styledComponents["default"].div.withConfig({
  componentId: "plasma-web__sc-1voj0go-0"
})(["border-radius:0.375rem;align-items:center;", ";", ""], _mixins.flexCenter, function (_ref) {
  var inRange = _ref.inRange;
  return inRange && (0, _styledComponents.css)(["&::before{content:'';z-index:-1;position:absolute;width:2.5rem;height:1.875rem;background:", ";}"], _plasmaCore.surfaceLiquid02);
});

var setSide = function setSide(side, isCurrent, isSelected) {
  switch (side) {
    case 'left':
      return "left: ".concat(!isSelected && isCurrent ? '-1px' : '0');

    case 'right':
      return "right: ".concat(!isSelected && isCurrent ? '-1px' : '0');

    default:
      return undefined;
  }
};

var StyledDayRoot = /*#__PURE__*/_styledComponents["default"].div.withConfig({
  componentId: "plasma-web__sc-1voj0go-1"
})(["", ";position:relative;box-sizing:border-box;min-width:2.5rem;min-height:2rem;border-radius:0.5rem;", ";", " ", " ", " ", " ", ";", ""], _plasmaTypo.bodyS, _mixins.flexCenter, function (_ref2) {
  var isDayInCurrentMonth = _ref2.isDayInCurrentMonth;
  return (0, _styledComponents.css)(["color:", ";"], isDayInCurrentMonth ? _plasmaCore.primary : _plasmaCore.secondary);
}, function (_ref3) {
  var isDayInCurrentMonth = _ref3.isDayInCurrentMonth,
      isDouble = _ref3.isDouble;
  return (0, _styledComponents.css)(["visibility:", ";"], !isDayInCurrentMonth && isDouble ? 'hidden' : 'visible');
}, function (_ref4) {
  var sideInRange = _ref4.sideInRange,
      isCurrent = _ref4.isCurrent,
      isSelected = _ref4.isSelected;
  return sideInRange && (0, _styledComponents.css)(["", "::before{content:'';z-index:-1;position:absolute;width:0.313rem;height:1.875rem;background:", ";", ";}"], StyledDay, _plasmaCore.surfaceLiquid02, setSide(sideInRange, isCurrent, isSelected));
}, function (_ref5) {
  var dayOfWeek = _ref5.dayOfWeek;
  return dayOfWeek && (0, _styledComponents.css)(["color:", ";"], _plasmaCore.tertiary);
}, function (_ref6) {
  var isSelected = _ref6.isSelected,
      isCurrent = _ref6.isCurrent,
      isHovered = _ref6.isHovered,
      dayOfWeek = _ref6.dayOfWeek,
      $disabled = _ref6.$disabled;
  return !dayOfWeek && !$disabled && (0, _mixins.selected)({
    StyledItem: StyledDay,
    minWidth: 2.25,
    minHeight: 1.75,
    isSelected: isSelected,
    isCurrent: isCurrent,
    isHovered: isHovered
  });
}, function (_ref7) {
  var $disabled = _ref7.$disabled,
      isCurrent = _ref7.isCurrent;
  return $disabled && (0, _styledComponents.css)(["cursor:not-allowed;opacity:0.4;", ";"], (0, _plasmaCore.addFocus)({
    outlineRadius: '0.563rem',
    outlineSize: '0.063rem',
    outlineOffset: isCurrent ? '0.125rem' : '0.063rem'
  }));
});

var StyledEvents = /*#__PURE__*/_styledComponents["default"].div.withConfig({
  componentId: "plasma-web__sc-1voj0go-2"
})(["display:flex;position:absolute;bottom:0.25rem;"]);

var StyledEvent = /*#__PURE__*/_styledComponents["default"].div.withConfig({
  componentId: "plasma-web__sc-1voj0go-3"
})(["margin:0 0.063rem;width:0.188rem;height:0.188rem;border-radius:50%;", ""], function (_ref8) {
  var _ref8$color = _ref8.color,
      color = _ref8$color === void 0 ? _plasmaCore.accent : _ref8$color;
  return (0, _styledComponents.css)(["background-color:", ";"], color);
});
/**
 * Компонент дня в календаре.
 */


var CalendarDayItem = /*#__PURE__*/(0, _react.memo)( /*#__PURE__*/(0, _react.forwardRef)(function (_ref9, outerRef) {
  var isFocused = _ref9.isFocused,
      dayOfWeek = _ref9.dayOfWeek,
      disabled = _ref9.disabled,
      isCurrent = _ref9.isCurrent,
      isSelected = _ref9.isSelected,
      isDayInCurrentMonth = _ref9.isDayInCurrentMonth,
      isDouble = _ref9.isDouble,
      inRange = _ref9.inRange,
      isHovered = _ref9.isHovered,
      sideInRange = _ref9.sideInRange,
      _ref9$eventList = _ref9.eventList,
      eventList = _ref9$eventList === void 0 ? [] : _ref9$eventList,
      day = _ref9.day,
      monthIndex = _ref9.monthIndex,
      year = _ref9.year,
      onClick = _ref9.onClick,
      onMouseOver = _ref9.onMouseOver,
      onFocus = _ref9.onFocus,
      disabledArrowKey = _ref9.disabledArrowKey,
      disabledMonths = _ref9.disabledMonths,
      rest = _objectWithoutProperties(_ref9, _excluded);

  return /*#__PURE__*/_react["default"].createElement(StyledDayRoot, _extends({
    ref: outerRef,
    tabIndex: isFocused ? 0 : -1,
    dayOfWeek: dayOfWeek,
    isCurrent: isCurrent,
    isSelected: isSelected,
    isDayInCurrentMonth: isDayInCurrentMonth,
    isDouble: isDouble,
    isHovered: isHovered,
    sideInRange: sideInRange,
    onClick: disabled ? undefined : onClick,
    onMouseOver: onMouseOver,
    onFocus: onFocus,
    "data-day": day,
    "data-month-index": monthIndex,
    "data-year": year,
    "data-disabled-arrow-key": disabledArrowKey || undefined,
    "data-disabled-months": disabledMonths || undefined,
    "aria-selected": isSelected,
    "aria-disabled": disabled,
    "aria-describedby": disabled ? 'withShift' : undefined,
    $disabled: disabled
  }, rest), /*#__PURE__*/_react["default"].createElement(StyledDay, {
    inRange: inRange
  }, day), /*#__PURE__*/_react["default"].createElement(StyledEvents, {
    "aria-hidden": true
  }, [eventList[0], eventList[1], eventList[2]].map(function (event, i) {
    return event && /*#__PURE__*/_react["default"].createElement(StyledEvent, _extends({
      key: "".concat(event.date, "-").concat(i)
    }, event));
  })));
}));
exports.CalendarDayItem = CalendarDayItem;