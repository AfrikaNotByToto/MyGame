"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CalendarBase = void 0;

var _react = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("react"));

var _styledComponents = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("styled-components"));

var _types = /*#__PURE__*/require("./types");

var _utils = /*#__PURE__*/require("./utils");

var _CalendarDays = /*#__PURE__*/require("./CalendarDays");

var _CalendarMonths = /*#__PURE__*/require("./CalendarMonths");

var _CalendarHeader = /*#__PURE__*/require("./CalendarHeader");

var _CalendarYears = /*#__PURE__*/require("./CalendarYears");

var _hooks = /*#__PURE__*/require("./hooks");

var _reducer = /*#__PURE__*/require("./store/reducer");

var _types2 = /*#__PURE__*/require("./store/types");

var _excluded = ["value", "min", "max", "type", "eventList", "disabledList", "onChangeValue"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var StyledCalendar = /*#__PURE__*/_styledComponents["default"].div.withConfig({
  componentId: "plasma-web__sc-1i4r6fa-0"
})(["position:relative;user-select:none;z-index:1;width:19.5rem;height:19.5rem;"]);

var IsOutOfRange = /*#__PURE__*/_styledComponents["default"].div.withConfig({
  componentId: "plasma-web__sc-1i4r6fa-1"
})(["position:absolute;padding:0;margin:0;height:0;width:0;border:0;overflow:hidden;clip:rect(0 0 0 0);"]);
/**
 * Компонент календаря.
 */


var CalendarBase = function CalendarBase(_ref) {
  var externalValue = _ref.value,
      min = _ref.min,
      max = _ref.max,
      _ref$type = _ref.type,
      type = _ref$type === void 0 ? 'Days' : _ref$type,
      eventList = _ref.eventList,
      disabledList = _ref.disabledList,
      onChangeValue = _ref.onChangeValue,
      rest = _objectWithoutProperties(_ref, _excluded);

  var _useMemo = (0, _react.useMemo)(function () {
    return Array.isArray(externalValue) ? externalValue : [externalValue];
  }, [externalValue]),
      _useMemo2 = _slicedToArray(_useMemo, 2),
      firstValue = _useMemo2[0],
      secondValue = _useMemo2[1];

  var value = secondValue || firstValue;

  var _useState = (0, _react.useState)(),
      _useState2 = _slicedToArray(_useState, 2),
      hoveredDay = _useState2[0],
      setHoveredDay = _useState2[1];

  var _useState3 = (0, _react.useState)(type),
      _useState4 = _slicedToArray(_useState3, 2),
      prevType = _useState4[0],
      setPrevType = _useState4[1];

  var _useState5 = (0, _react.useState)(value),
      _useState6 = _slicedToArray(_useState5, 2),
      prevValue = _useState6[0],
      setPrevValue = _useState6[1];

  var _useState7 = (0, _react.useState)(0),
      _useState8 = _slicedToArray(_useState7, 2),
      outOfRangeKey = _useState8[0],
      setOutOfRangeKey = _useState8[1];

  var _useReducer = (0, _react.useReducer)(_reducer.reducer, (0, _reducer.getInitialState)(value, [5, 6], type)),
      _useReducer2 = _slicedToArray(_useReducer, 2),
      state = _useReducer2[0],
      dispatch = _useReducer2[1];

  var date = state.date,
      calendarState = state.calendarState,
      startYear = state.startYear,
      size = state.size;
  var handlePrev = (0, _react.useCallback)(function () {
    var withShift = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    if (calendarState === _types.CalendarState.Days) {
      if (withShift) {
        dispatch({
          type: _types2.ActionType.PREVIOUS_YEAR,
          payload: {
            step: 1
          }
        });
        return;
      }

      dispatch({
        type: _types2.ActionType.PREVIOUS_MONTH,
        payload: {
          monthIndex: date.monthIndex,
          year: date.year
        }
      });
      return;
    }

    if (calendarState === _types.CalendarState.Months) {
      dispatch({
        type: _types2.ActionType.PREVIOUS_YEAR,
        payload: {
          step: 1
        }
      });
      return;
    }

    if (calendarState === _types.CalendarState.Years) {
      dispatch({
        type: _types2.ActionType.PREVIOUS_START_YEAR,
        payload: {
          yearsCount: _utils.YEAR_RENDER_COUNT
        }
      });
    }
  }, [date, calendarState]);
  var handleNext = (0, _react.useCallback)(function () {
    var withShift = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    if (calendarState === _types.CalendarState.Days) {
      if (withShift) {
        dispatch({
          type: _types2.ActionType.NEXT_YEAR,
          payload: {
            step: 1
          }
        });
        return;
      }

      dispatch({
        type: _types2.ActionType.NEXT_MONTH,
        payload: {
          monthIndex: date.monthIndex,
          year: date.year
        }
      });
      return;
    }

    if (calendarState === _types.CalendarState.Months) {
      dispatch({
        type: _types2.ActionType.NEXT_YEAR,
        payload: {
          step: 1
        }
      });
      return;
    }

    if (calendarState === _types.CalendarState.Years) {
      dispatch({
        type: _types2.ActionType.NEXT_START_YEAR,
        payload: {
          yearsCount: _utils.YEAR_RENDER_COUNT
        }
      });
    }
  }, [date, calendarState]);

  var _useKeyNavigation = (0, _hooks.useKeyNavigation)({
    size: size,
    onNext: handleNext,
    onPrev: handlePrev
  }),
      _useKeyNavigation2 = _slicedToArray(_useKeyNavigation, 5),
      selectIndexes = _useKeyNavigation2[0],
      onKeyDown = _useKeyNavigation2[1],
      onSelectIndexes = _useKeyNavigation2[2],
      outerRefs = _useKeyNavigation2[3],
      isOutOfRange = _useKeyNavigation2[4];

  var handleOnChangeDay = (0, _react.useCallback)(function (newDate, coord) {
    var newDay = new Date(newDate.year, newDate.monthIndex, newDate.day);
    onChangeValue(newDay);
    onSelectIndexes(coord);
  }, [onChangeValue, onSelectIndexes]);
  var handleOnChangeMonth = (0, _react.useCallback)(function (monthIndex) {
    dispatch({
      type: _types2.ActionType.UPDATE_MONTH,
      payload: {
        calendarState: _types.CalendarState.Days,
        monthIndex: monthIndex,
        size: [5, 6]
      }
    });
  }, []);
  var handleOnChangeYear = (0, _react.useCallback)(function (year) {
    dispatch({
      type: _types2.ActionType.UPDATE_YEAR,
      payload: {
        calendarState: _types.CalendarState.Months,
        year: year
      }
    });
  }, []);
  var handleUpdateCalendarState = (0, _react.useCallback)(function (newCalendarState, newSize) {
    dispatch({
      type: _types2.ActionType.UPDATE_CALENDAR_STATE,
      payload: {
        calendarState: newCalendarState,
        size: newSize
      }
    });
  }, []);

  if (value && prevValue && (0, _utils.isValueUpdate)(value, prevValue)) {
    dispatch({
      type: _types2.ActionType.UPDATE_DATE,
      payload: {
        value: value
      }
    });
    setPrevValue(value);
  }

  if (prevType !== type) {
    dispatch({
      type: _types2.ActionType.UPDATE_CALENDAR_STATE,
      payload: {
        calendarState: type
      }
    });
    setPrevType(type);
  } // Изменяем ключ каждый раз как пытаемся перейти на даты которые находятся за пределами min/max ограничений.
  // Это необходимо для того чтобы screen-reader корректно озвучивал уведомление aria-live="assertive"
  // о том что нет доступных дат


  var handleKeyDown = (0, _react.useCallback)(function (event) {
    setOutOfRangeKey(function (previousState) {
      return Number(!previousState);
    });
    onKeyDown(event);
  }, [onKeyDown]);
  return /*#__PURE__*/_react["default"].createElement(StyledCalendar, _extends({
    "aria-label": "\u0412\u044B\u0431\u043E\u0440 \u0434\u0430\u0442\u044B"
  }, rest), isOutOfRange && /*#__PURE__*/_react["default"].createElement(IsOutOfRange, {
    key: outOfRangeKey,
    "aria-atomic": "true",
    role: "alert",
    "aria-live": "assertive",
    "aria-relevant": "additions"
  }, "\u0414\u0430\u043B\u0435\u0435 \u043D\u0435\u0442 \u0434\u043E\u0441\u0442\u0443\u043F\u043D\u044B\u0445 \u0434\u0430\u0442."), /*#__PURE__*/_react["default"].createElement(_CalendarHeader.CalendarHeader, {
    firstDate: date,
    startYear: startYear,
    type: calendarState,
    onPrev: handlePrev,
    onNext: handleNext,
    onUpdateCalendarState: handleUpdateCalendarState
  }), calendarState === _types.CalendarState.Days && /*#__PURE__*/_react["default"].createElement(_CalendarDays.CalendarDays, {
    eventList: eventList,
    disabledList: disabledList,
    min: min,
    max: max,
    value: externalValue,
    date: date,
    hoveredDay: hoveredDay,
    selectIndexes: selectIndexes,
    onChangeDay: handleOnChangeDay,
    onHoverDay: setHoveredDay,
    onSetSelected: onSelectIndexes,
    onKeyDown: handleKeyDown,
    outerRefs: outerRefs
  }), calendarState === _types.CalendarState.Months && /*#__PURE__*/_react["default"].createElement(_CalendarMonths.CalendarMonths, {
    date: date,
    selectIndexes: selectIndexes,
    onChangeMonth: handleOnChangeMonth,
    onSetSelected: onSelectIndexes,
    onKeyDown: onKeyDown,
    outerRefs: outerRefs
  }), calendarState === _types.CalendarState.Years && /*#__PURE__*/_react["default"].createElement(_CalendarYears.CalendarYears, {
    date: date,
    startYear: startYear,
    selectIndexes: selectIndexes,
    onChangeYear: handleOnChangeYear,
    onSetSelected: onSelectIndexes,
    onKeyDown: onKeyDown,
    outerRefs: outerRefs
  }));
};

exports.CalendarBase = CalendarBase;