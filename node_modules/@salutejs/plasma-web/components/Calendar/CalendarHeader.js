"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CalendarHeader = void 0;

var _react = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("react"));

var _styledComponents = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("styled-components"));

var _plasmaTypo = /*#__PURE__*/require("@salutejs/plasma-typo");

var _plasmaIcons = /*#__PURE__*/require("@salutejs/plasma-icons");

var _plasmaCore = /*#__PURE__*/require("@salutejs/plasma-core");

var _types = /*#__PURE__*/require("./types");

var _utils = /*#__PURE__*/require("./utils");

var _mixins = /*#__PURE__*/require("./mixins");

var _IconDisclosureLeft, _IconDisclosureRight;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var StyledCalendarHeader = /*#__PURE__*/_styledComponents["default"].div.withConfig({
  componentId: "plasma-web__sc-jj1w0v-0"
})(["", ";padding:1rem 1.5rem 0;", ";"], _plasmaTypo.h4Bold, _mixins.flexSpaceBetween);

var StyledHeader = /*#__PURE__*/_styledComponents["default"].button.attrs({
  type: 'button'
}).withConfig({
  componentId: "plasma-web__sc-jj1w0v-1"
})(["", ";", ";color:", ";cursor:pointer;padding:0.5rem 0;", ";"], _plasmaTypo.h4Bold, _mixins.buttonFocus, _plasmaCore.primary, _mixins.flexSpaceBetween);

var StyledHeaderDouble = /*#__PURE__*/_styledComponents["default"].h4.withConfig({
  componentId: "plasma-web__sc-jj1w0v-2"
})(["", ";margin-top:0;margin-bottom:0;padding:0.5rem 0;flex:1;", ";&:first-of-type{margin-right:3rem;}&:last-of-type{margin-left:3rem;}"], _plasmaTypo.h4Bold, _mixins.flexCenter);

var StyledArrows = /*#__PURE__*/_styledComponents["default"].div.withConfig({
  componentId: "plasma-web__sc-jj1w0v-3"
})(["padding:0.5rem 0;width:5.5rem;", ";"], _mixins.flexSpaceBetween);

var StyledArrow = /*#__PURE__*/_styledComponents["default"].button.attrs({
  type: 'button'
}).withConfig({
  componentId: "plasma-web__sc-jj1w0v-4"
})(["", ";display:flex;cursor:pointer;"], _mixins.buttonFocus);

var StyledNavigation = /*#__PURE__*/_styledComponents["default"].div.withConfig({
  componentId: "plasma-web__sc-jj1w0v-5"
})(["width:100%;", ";"], _mixins.flexCenter);
/**
 * Компонент шапки календаря.
 */


var CalendarHeader = function CalendarHeader(_ref) {
  var _ref$type = _ref.type,
      type = _ref$type === void 0 ? 'Days' : _ref$type,
      _ref$startYear = _ref.startYear,
      startYear = _ref$startYear === void 0 ? 0 : _ref$startYear,
      firstDate = _ref.firstDate,
      secondDate = _ref.secondDate,
      isDouble = _ref.isDouble,
      onPrev = _ref.onPrev,
      onNext = _ref.onNext,
      onUpdateCalendarState = _ref.onUpdateCalendarState;
  var handleCalendarState = (0, _react.useCallback)(function () {
    if (type === _types.CalendarState.Days) {
      onUpdateCalendarState === null || onUpdateCalendarState === void 0 ? void 0 : onUpdateCalendarState(_types.CalendarState.Months, [3, 2]);
    }

    if (type === _types.CalendarState.Months) {
      onUpdateCalendarState === null || onUpdateCalendarState === void 0 ? void 0 : onUpdateCalendarState(_types.CalendarState.Years, [3, 2]);
    }
  }, [type, onUpdateCalendarState]);
  var getHeaderContent = (0, _react.useCallback)(function (date) {
    if (!date) {
      return '';
    }

    if (type === _types.CalendarState.Days) {
      return "".concat(_utils.MONTH_NAMES[date.monthIndex], " ").concat(date.year);
    }

    if (type === _types.CalendarState.Months) {
      return "".concat(date.year);
    }

    if (type === _types.CalendarState.Years) {
      return "".concat(startYear, "\u2014").concat(startYear + _utils.YEAR_RENDER_COUNT - 1);
    }

    return '';
  }, [type, startYear]);
  var currentCalendarType = (0, _utils.getCalendarType)(isDouble ? _types.CalendarState.Days : type);
  var PreviousButton = (0, _react.useMemo)(function () {
    return /*#__PURE__*/_react["default"].createElement(StyledArrow, {
      "aria-label": "\u041F\u0440\u0435\u0434\u044B\u0434\u0443\u0449\u0438\u0439 ".concat(currentCalendarType),
      tabIndex: 0,
      onClick: function onClick() {
        return onPrev();
      }
    }, _IconDisclosureLeft || (_IconDisclosureLeft = /*#__PURE__*/_react["default"].createElement(_plasmaIcons.IconDisclosureLeft, null)));
  }, [currentCalendarType, onPrev]);
  var NextButton = (0, _react.useMemo)(function () {
    return /*#__PURE__*/_react["default"].createElement(StyledArrow, {
      "aria-label": "\u0421\u043B\u0435\u0434\u0443\u044E\u0449\u0438\u0439 ".concat(currentCalendarType),
      tabIndex: 0,
      onClick: function onClick() {
        return onNext();
      }
    }, _IconDisclosureRight || (_IconDisclosureRight = /*#__PURE__*/_react["default"].createElement(_plasmaIcons.IconDisclosureRight, null)));
  }, [currentCalendarType, onNext]);
  return /*#__PURE__*/_react["default"].createElement(StyledCalendarHeader, null, isDouble ? /*#__PURE__*/_react["default"].createElement(StyledNavigation, null, PreviousButton, /*#__PURE__*/_react["default"].createElement(StyledHeaderDouble, {
    "aria-live": "polite"
  }, getHeaderContent(firstDate)), /*#__PURE__*/_react["default"].createElement(StyledHeaderDouble, {
    "aria-live": "polite"
  }, getHeaderContent(secondDate)), NextButton) : /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(StyledHeader, {
    "aria-live": "polite",
    id: "id-grid-label",
    onClick: handleCalendarState,
    tabIndex: 0
  }, getHeaderContent(firstDate)), /*#__PURE__*/_react["default"].createElement(StyledArrows, null, PreviousButton, NextButton)));
};

exports.CalendarHeader = CalendarHeader;